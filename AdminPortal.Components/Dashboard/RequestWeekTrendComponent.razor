@using ChartJs.Blazor.LineChart
@using TKW.AdminPortal.Components.SharedComponents
@namespace TKW.AdminPortal.Components.Dashboard
@inject HttpClient http
@if (model != null)
{
    <div class="mb-3">
        <div class="card shadow-sm">
            <div class="card-body">
                <Chart Config="_config" @ref="_chart"></Chart>
            </div>
        </div>
    </div>

}
else
{
    <div class="mb-3">
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="shimmer w-100" style="height:250px"></div>
            </div>
        </div>
    </div>

}



@code {
    List<RequestWeekTrendModel> model;
    private const int DayCount = 6;
    private LineConfig _config;
    private Chart _chart;
    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await LoadChartData();
            StateHasChanged();
        }

    }

    protected async Task LoadChartData()
    {

        model = await http.GetFromJsonAsync<List<RequestWeekTrendModel>>("api/RequestWeekTrendListData");
        _config = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                MaintainAspectRatio = true,

                Legend = new Legend
                {
                    Display = true,
                    Position = Position.Top
                },
                Title = new OptionsTitle
                {
                    Display = false,
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Hover = new Hover
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Scales = new Scales
                {
                    YAxes = new List<CartesianAxis>
{
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                StepSize = 20,
                            }
                        }
                    }
                },



            }
        };

        IDataset<int> ScheduledCountDataset = new LineDataset<int>()
        {
            Label = "Scheduled",
            BackgroundColor = ColorUtil.ColorString(220, 220, 220, 0.5),
            Fill = true,
            PointRadius = 0,
        };

        IDataset<int> HandledCountDataset = new LineDataset<int>()
        {
            Label = "Handled",
            BackgroundColor = ColorUtil.ColorString(98, 203, 49, 0.5),
            Fill = true,
            PointRadius = 0,
        };

        IDataset<int> CancelledCountDataset = new LineDataset<int>()
        {
            Label = "Cancelled",
            BackgroundColor = ColorUtil.ColorString(243, 32, 19, 0.5),
            Fill = true,
            PointRadius = 0,
        };

        foreach (var i in model)
        {
            _config.Data.Labels.Add(i.Date.DayOfWeek.ToString());
            ScheduledCountDataset.Add(i.ScheduledRequestCount);
            CancelledCountDataset.Add(i.CancelledRequestCount);
            HandledCountDataset.Add(i.HandledRequestCount);
        }

        _config.Data.Datasets.Add(ScheduledCountDataset);
        _config.Data.Datasets.Add(HandledCountDataset);
        _config.Data.Datasets.Add(CancelledCountDataset);
    }
}
