@using ChartJs.Blazor.BarChart
@using TKW.AdminPortal.Components.SharedComponents
@using System.Linq
@namespace TKW.AdminPortal.Components.Dashboard
@inject HttpClient http
@if (model == null)
{

}
else
{
    <div class="card">
        <div class="card-title">

        </div>
        <div class="card-body">
            <div class="float-end">

                <div class="btn-group">
                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                        @selectedType
                    </button>
                    <ul class="dropdown-menu">
                        @foreach (var t in (RequestType[])Enum.GetValues(typeof(RequestType)))
                        {
                            <li><a class="dropdown-item" @onclick="()=> updateType(t)" href="#">@t</a></li>
                        }
                    </ul>
                </div>

                <div class="btn-group">
                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                        @getLabelString(selectedLabel)
                    </button>
                    <ul class="dropdown-menu">
                        @foreach (var l in (Labels[])Enum.GetValues(typeof(Labels)))
                        {
                            <li><a class="dropdown-item" @onclick="()=>updateLabel(l)" href="#">@getLabelString(l)</a></li>
                        }
                    </ul>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                        @getFilterString(selectedFilterId)
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" @onclick="()=>updateFilterId(null)" href="#">All</a></li>
                        @foreach (var f in selectedLabel == Labels.Reason ? data.Select(m => m.SourceAppId).Distinct() : data.Select(m => m.ReasonId).Distinct())
                        {
                            <li><a class="dropdown-item" @onclick="()=>updateFilterId(f)" href="#">@getFilterString(f)</a></li>
                        }
                    </ul>
                </div>
            </div>
            <Chart Config="_config" @ref="_chart"></Chart>
        </div>
    </div>
}
@code {
    public List<CancelledAndRescheduledRequestModel> model { get; set; }

    public List<CancelledAndRescheduledRequestModel> data { get; set; }


    RequestType selectedType;

    Labels selectedLabel;

    string getLabelString(Labels label) => label == Labels.SourceApp ? "Source app" : "Reason";

    string getFilterString(int? filterId)
    {
        if (filterId == null) return "All";

        if (selectedLabel == Labels.SourceApp)
            return data.FirstOrDefault(m => m.ReasonId == filterId)?.ReasonName ?? "";
        else
            return data.FirstOrDefault(m => m.SourceAppId == filterId)?.SourceAppName ?? "";

    }

    int? selectedFilterId;

    private BarConfig _config;
    private Chart _chart;

    void updateType(RequestType t)
    {
        selectedType = t;
        data = selectedType == RequestType.Cancelled ? model.Where(m => m.IsCancelled).ToList() : model.Where(m => !m.IsCancelled).ToList();
        UpdateData();
    }

    void updateLabel(Labels t)
    {
        selectedLabel = t;
        UpdateData();
    }

    void updateFilterId(int? filterId)
    {
        selectedFilterId = filterId;
        UpdateData();
    }

    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            await LoadChartData();

            selectedLabel = Labels.SourceApp;
            selectedType = RequestType.Cancelled;
            data = model.Where(m => m.IsCancelled).ToList();

            UpdateData();
        }


    }
    private async Task LoadChartData()
    {

        model = await http.GetFromJsonAsync<List<CancelledAndRescheduledRequestModel>>("api/GetCancelledAndRescheduledRequestDetails");

        _config = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Display = true,
                    Position = Position.Top
                },
                Title = new OptionsTitle
                {
                    Display = false,
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Hover = new Hover
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
            }
        };

    }

    public void UpdateData()
    {
        _config.Data.Labels.Clear();
        _config.Data.Datasets.Clear();


        var dataset = new BarDataset<int>(true);

        if (selectedLabel == Labels.SourceApp)
        {
            foreach (var l in data.GroupBy(m => m.SourceAppName))
            {
                _config.Data.Labels.Add(l.Key);
                dataset.Add(selectedFilterId == null ? l.Count() : l.Count(m => m.ReasonId == selectedFilterId));
            }
        }
        else
        {
            foreach (var l in data.GroupBy(m => m.ReasonName))
            {
                _config.Data.Labels.Add(l.Key);
                dataset.Add(selectedFilterId == null ? l.Count() : l.Count(m => m.SourceAppId == selectedFilterId));
            }
        }
        _config.Data.Datasets.Add(dataset);
        StateHasChanged();
    }


    enum Labels
    {
        SourceApp,
        Reason
    }
    enum RequestType
    {
        Cancelled,
        Rescheduled
    }
}